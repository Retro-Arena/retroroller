# Template file for 'odroid-go2-rrvl-kernel'
#
_gitrev=83cade45e049817e47882c5f249783a8f8ee318a
_gitshort="${_gitrev:0:7}"
pkgname=odroid-go2-rrvl-kernel
version=4.4.189
revision=23
short_desc="Linux kernel and modules for Odroid GO2 (${version%.*} [git ${_gitshort}])"
license="GPL-2.0-only"
homepage="http://www.kernel.org"
distfiles="https://github.com/valadaa48/linux/archive/${_gitrev}.tar.gz"
checksum=6662fa0cd80bac066cf2d29697f39647e794f610340ca57591077db19acbbfdb
patch_args="-Np1"
wrksrc="linux-${_gitrev}"
python_version=2 #unverified
replaces="odroid-go2-kernel>=0"
provides="odroid-go2-kernel"

nodebug=yes
nostrip=yes
noverifyrdeps=yes
noshlibprovides=yes
preserve=yes

archs="aarch64"
hostmakedepends="bc perl kmod uboot-mkimage libressl-devel python ncurses-devel flex"
makedepends="perl libunwind-devel libdwarf-devel zlib-devel python python-devel libaudit-devel slang-devel elfutils-devel liblzma-devel libnuma-devel libelf"
depends="libunwind libaudit libnuma zlib slang elfutils liblzma libelf"

_kernver="${version}_RRVL-${revision}"
triggers="kernel-hooks"
kernel_hooks_version="${_kernver}"

# These files could be modified when an external module is built.
mutable_files="
 /usr/lib/modules/${_kernver}/modules.builtin.bin
 /usr/lib/modules/${_kernver}/modules.builtin.alias.bin
 /usr/lib/modules/${_kernver}/modules.softdep
 /usr/lib/modules/${_kernver}/modules.dep
 /usr/lib/modules/${_kernver}/modules.dep.bin
 /usr/lib/modules/${_kernver}/modules.symbols
 /usr/lib/modules/${_kernver}/modules.symbols.bin
 /usr/lib/modules/${_kernver}/modules.alias
 /usr/lib/modules/${_kernver}/modules.alias.bin
 /usr/lib/modules/${_kernver}/modules.devname"

export KBUILD_BUILD_USER="odroid"
export KBUILD_BUILD_HOST="rrvl"

if [ "$CROSS_BUILD" ]; then
    _cross="CROSS_COMPILE=${XBPS_CROSS_TRIPLET}-"
fi

do_configure() {
	cp -f ${FILESDIR}/config-odroidgo2 .config

	# Always use our revision to CONFIG_LOCALVERSION to match our pkg version.
	sed -i -e "s|^\(CONFIG_LOCALVERSION=\).*|\1\"_RRVL-${revision}\"|" .config

    sed -i arch/arm64/Makefile -e "s/-fno-pic/-fno-pic -march=armv8-a+crc+fp+simd -mtune=cortex-a35 -mcpu=cortex-a35/"
}

do_build() {
	local arch

    arch=arm64

	export LDFLAGS=
	make ARCH=$arch ${_cross} ${makejobs} prepare
	make ARCH=$arch ${_cross} ${makejobs} Image modules dtbs

    make ARCH=$arch ${_cross} ${makejobs} WERROR=0 EXTRA_CFLAGS="-fcommon -Wno-stringop-truncation" -C tools/ perf
}

do_install() {
	local arch _args hdrdest

    arch=arm64

	# Run depmod after compressing modules.
	sed -i '2iexit 0' scripts/depmod.sh

	make ${makejobs} ARCH=$arch INSTALL_MOD_PATH=${DESTDIR} ${_cross} modules_install

	vinstall arch/${arch}/boot/Image 644 boot
	vinstall arch/${arch}/boot/dts/rockchip/rk3326-odroidgo2-linux.dtb 644 boot
	vinstall arch/${arch}/boot/dts/rockchip/rk3326-odroidgo2-linux-v11.dtb 644 boot
	vinstall arch/${arch}/boot/dts/rockchip/rk3326-odroidgo3-linux.dtb 644 boot

	hdrdest=${DESTDIR}/usr/src/kernel-headers-${_kernver}

	vinstall .config 644 boot config-${_kernver}
	vinstall System.map 644 boot System.map-${_kernver}

	# Switch to /usr.
	vmkdir usr
	mv ${DESTDIR}/lib ${DESTDIR}/usr

    make ARCH=$arch ${makejobs} ${_cross} WERROR=0 EXTRA_CFLAGS="-fcommon -Wno-stringop-truncation" prefix=${DESTDIR}/usr -C tools/ perf_install 

	cd ${DESTDIR}/usr/lib/modules/${_kernver}
	rm -f source build
	ln -sf ../../../src/kernel-headers-${_kernver} build

	cd ${wrksrc}
	# Install required headers to build external modules
	install -Dm644 Makefile ${hdrdest}/Makefile
	install -Dm644 kernel/Makefile ${hdrdest}/kernel/Makefile
	install -Dm644 .config ${hdrdest}/.config

	# Remove firmware stuff provided by the "linux-firmware" pkg.
	rm -rf ${DESTDIR}/usr/lib/firmware

	mkdir -p ${hdrdest}/include
	for i in acpi asm-generic clocksource config crypto drm generated linux \
		math-emu media net pcmcia scsi sound trace uapi video xen; do
		if [ -d include/$i ]; then
			cp -a include/$i ${hdrdest}/include
		fi
	done

	cd ${wrksrc}
	mkdir -p ${hdrdest}/arch/${arch}
	cp -a arch/${arch}/include ${hdrdest}/arch/${arch}

    # dkms needs this
	mkdir -p ${hdrdest}/arch/${arch}
	cp -rf arch/arm/include ${hdrdest}/arch/arm/

	# Remove helper binaries built for host,
	# if generated files from the scripts/ directory need to be included,
	# they need to be copied to ${hdrdest} before this step
	if [ "$CROSS_BUILD" ]; then
		make ${makejobs} ARCH=$arch ${_cross} _mrproper_scripts
		# remove host specific objects as well
		find scripts -name '*.o' -delete
	fi

	cd ${wrksrc}
	# Copy files necessary for later builds, like nvidia and vmware
	cp Module.symvers ${hdrdest}
	cp -a scripts ${hdrdest}

	# fix permissions on scripts dir
	chmod og-w -R ${hdrdest}/scripts

	mkdir -p ${hdrdest}/arch/${arch}/kernel
	cp arch/${arch}/Makefile ${hdrdest}/arch/${arch}

	# Add docbook makefile
	install -Dm644 Documentation/DocBook/Makefile \
		${hdrdest}/Documentation/DocBook/Makefile

	# Add md headers
	mkdir -p ${hdrdest}/drivers/md
	cp drivers/md/*.h ${hdrdest}/drivers/md

	# Add inotify.h
	mkdir -p ${hdrdest}/include/linux
	cp include/linux/inotify.h ${hdrdest}/include/linux

	# Add wireless headers
	mkdir -p ${hdrdest}/net/mac80211/
	cp net/mac80211/*.h ${hdrdest}/net/mac80211

	# Copy in Kconfig files
	for i in $(find . -name "Kconfig*"); do
		mkdir -p ${hdrdest}/$(echo $i | sed 's|/Kconfig.*||')
		cp $i ${hdrdest}/$i
	done

	# Remove unneeded architectures
	for arch in alpha avr32 blackfin cris frv h8300 \
		ia64 m* p* s* um v850 xtensa x86*; do
		rm -rf ${hdrdest}/arch/${arch}
	done
	# Keep arch/x86/ras/Kconfig as it is needed by drivers/ras/Kconfig
	mkdir -p ${hdrdest}/arch/x86/ras
	cp -a arch/x86/ras/Kconfig ${hdrdest}/arch/x86/ras/Kconfig

	# Compress all modules with xz to save a few MBs.
	msg_normal "$pkgver: compressing kernel modules with gzip, please wait...\n"
	find ${DESTDIR} -name '*.ko' -exec gzip -9 {} \;

	# ... and run depmod again.
	depmod -b ${DESTDIR}/usr -F System.map ${_kernver}
}

odroid-go2-rrvl-kernel-headers_package() {
	preserve=yes
	nostrip=yes
	noverifyrdeps=yes
	noshlibprovides=yes
    provides="linux5.10-headers"
    replaces="linux5.10-headers>=0"
	short_desc+=" - source headers for 3rd party modules"
	pkg_install() {
		vmove usr/src
		vmove usr/lib/modules/${_kernver}/build
	}
}
