diff --git a/configure.ac b/configure.ac
index 474ed03d1..5648fe6ce 100644
--- a/configure.ac
+++ b/configure.ac
@@ -2276,8 +2276,9 @@ AS_HELP_STRING([--enable-kmsdrm-shared], [dynamically load kmsdrm support [[defa
                 AC_DEFINE_UNQUOTED(SDL_VIDEO_DRIVER_KMSDRM_DYNAMIC_GBM, "$gbm_lib", [ ])
                 AC_DEFINE_UNQUOTED(HAVE_KMSDRM_SHARED, "TRUE", [ ])
                 SUMMARY_video="${SUMMARY_video} kmsdrm(dynamic)"
+                EXTRA_LDFLAGS="$EXTRA_LDFLAGS -lrga"
             else
-                EXTRA_LDFLAGS="$EXTRA_LDFLAGS $LIBDRM_LIBS $LIBGBM_LIBS"
+                EXTRA_LDFLAGS="$EXTRA_LDFLAGS $LIBDRM_LIBS $LIBGBM_LIBS -lrga"
                 SUMMARY_video="${SUMMARY_video} kmsdrm"
             fi
             AC_MSG_RESULT($kmsdrm_shared)
diff --git a/src/video/kmsdrm/SDL_kmsdrmopengles.c b/src/video/kmsdrm/SDL_kmsdrmopengles.c
index 355d57bfd..1f40496ba 100644
--- a/src/video/kmsdrm/SDL_kmsdrmopengles.c
+++ b/src/video/kmsdrm/SDL_kmsdrmopengles.c
@@ -31,6 +31,9 @@
 #define EGL_PLATFORM_GBM_MESA 0x31D7
 #endif
 
+extern rga_info_t src_info;
+extern rga_info_t dst_info;
+
 /* EGL implementation of SDL OpenGL support */
 
 int
@@ -62,6 +65,7 @@ KMSDRM_GLES_SwapWindow(_THIS, SDL_Window * window) {
     SDL_VideoData *viddata = ((SDL_VideoData *)_this->driverdata);
     KMSDRM_FBInfo *fb_info;
     SDL_bool crtc_setup_pending = SDL_FALSE;
+    struct gbm_bo* rga_buffer = NULL;
 
     /* ALWAYS wait for each pageflip to complete before issuing another, vsync or not,
        or drmModePageFlip() will start returning EBUSY if there are pending pageflips.
@@ -115,11 +119,24 @@ KMSDRM_GLES_SwapWindow(_THIS, SDL_Window * window) {
         /* Issue synchronous pageflip: drmModePageFlip() NEVER blocks, synchronous here means that it
            will be done on next VBLANK, not ASAP. And return to program loop inmediately. */
 
-        fb_info = KMSDRM_FBFromBO(_this, windata->next_bo);
+        if (src_info.fd) {
+            close(src_info.fd);
+        }
+        src_info.fd = KMSDRM_gbm_bo_get_fd(windata->next_bo);
+        dst_info.fd = viddata->rga_buffer_prime_fds[viddata->rga_buffer_index];
+        if (c_RkRgaBlit(&src_info, &dst_info, NULL) < 0) {
+            SDL_LogError(SDL_LOG_CATEGORY_VIDEO,
+                            "Failed to rga blit\n");
+        }
+    
+        rga_buffer = viddata->rga_buffers[viddata->rga_buffer_index];
+        fb_info = KMSDRM_FBFromBO(_this, rga_buffer);
         if (!fb_info) {
             return 0;
         }
 
+        viddata->rga_buffer_index = (viddata->rga_buffer_index + 1) % RGA_BUFFERS_MAX;
+
         /* When needed, this is done once we have the needed fb_id, not before. */
         if (crtc_setup_pending) {
 	    if (KMSDRM_drmModeSetCrtc(viddata->drm_fd, dispdata->crtc_id, fb_info->fb_id, 0,
@@ -204,10 +221,22 @@ KMSDRM_GLES_SwapWindow(_THIS, SDL_Window * window) {
 
         /* Issue synchronous pageflip: drmModePageFlip() NEVER blocks, synchronous here means that it
            will be done on next VBLANK, not ASAP. And return to program loop inmediately. */
-        fb_info = KMSDRM_FBFromBO(_this, windata->next_bo);
+        if (src_info.fd) {
+            close(src_info.fd);
+        }
+        src_info.fd = KMSDRM_gbm_bo_get_fd(windata->next_bo);
+        dst_info.fd = viddata->rga_buffer_prime_fds[viddata->rga_buffer_index];
+        if (c_RkRgaBlit(&src_info, &dst_info, NULL) < 0) {
+            SDL_LogError(SDL_LOG_CATEGORY_VIDEO,
+                            "Failed to rga blit\n");
+        }
+
+        rga_buffer = viddata->rga_buffers[viddata->rga_buffer_index];
+        fb_info = KMSDRM_FBFromBO(_this, rga_buffer);
         if (!fb_info) {
             return 0;
         }
+        viddata->rga_buffer_index = (viddata->rga_buffer_index + 1) % RGA_BUFFERS_MAX;
 
         /* When needed, this is done once we have the needed fb_id, not before. */
         if (crtc_setup_pending) {
diff --git a/src/video/kmsdrm/SDL_kmsdrmsym.h b/src/video/kmsdrm/SDL_kmsdrmsym.h
index e3e48ef64..aa240cc75 100644
--- a/src/video/kmsdrm/SDL_kmsdrmsym.h
+++ b/src/video/kmsdrm/SDL_kmsdrmsym.h
@@ -88,6 +88,7 @@ SDL_KMSDRM_SYM(struct gbm_surface *,gbm_surface_create,(struct gbm_device *gbm,
 SDL_KMSDRM_SYM(void,gbm_surface_destroy,(struct gbm_surface *surf))
 SDL_KMSDRM_SYM(struct gbm_bo *,gbm_surface_lock_front_buffer,(struct gbm_surface *surf))
 SDL_KMSDRM_SYM(void,gbm_surface_release_buffer,(struct gbm_surface *surf, struct gbm_bo *bo))
+SDL_KMSDRM_SYM(int,gbm_bo_get_fd,(struct gbm_bo *bo))
 
 
 #undef SDL_KMSDRM_MODULE
diff --git a/src/video/kmsdrm/SDL_kmsdrmvideo.c b/src/video/kmsdrm/SDL_kmsdrmvideo.c
index 710a6a009..800428c8e 100644
--- a/src/video/kmsdrm/SDL_kmsdrmvideo.c
+++ b/src/video/kmsdrm/SDL_kmsdrmvideo.c
@@ -41,6 +41,7 @@
 #include "SDL_kmsdrmopengles.h"
 #include "SDL_kmsdrmmouse.h"
 #include "SDL_kmsdrmdyn.h"
+#include <sys/ioctl.h>
 #include <sys/stat.h>
 #include <dirent.h>
 #include <errno.h>
@@ -48,6 +49,9 @@
 
 #define KMSDRM_DRI_PATH "/dev/dri/"
 
+rga_info_t src_info = {0};
+rga_info_t dst_info = {0};
+
 static int
 check_modestting(int devindex)
 {
@@ -253,6 +257,40 @@ KMSDRM_FBDestroyCallback(struct gbm_bo *bo, void *data)
     SDL_free(fb_info);
 }
 
+static void
+KMSDRM_InitRotateBuffer(_THIS, int frameWidth, int frameHeight)
+{
+    SDL_VideoData *viddata = ((SDL_VideoData *)_this->driverdata);
+
+    // initialize 2D raster graphic acceleration unit (RGA)
+    c_RkRgaInit();
+
+    // create buffers for RGA
+    for (int i = 0; i < RGA_BUFFERS_MAX; ++i)
+    {
+        viddata->rga_buffers[i] = KMSDRM_gbm_bo_create(viddata->gbm,
+              frameWidth, frameHeight,
+              GBM_FORMAT_XRGB8888, GBM_BO_USE_SCANOUT | GBM_BO_USE_RENDERING);
+        assert(viddata->rga_buffers[i]);
+
+        viddata->rga_buffer_prime_fds[i] = KMSDRM_gbm_bo_get_fd(viddata->rga_buffers[i]);
+    }
+    viddata->rga_buffer_index = 0;
+
+    // setup rotation
+    src_info.fd = -1;
+    src_info.mmuFlag = 1;
+    src_info.rotation = HAL_TRANSFORM_ROT_270;
+
+    // swap width and height here because our source buffer is 480x320
+    rga_set_rect(&src_info.rect, 0, 0, frameHeight, frameWidth, frameHeight, frameWidth, RK_FORMAT_BGRA_8888);
+
+    dst_info.fd = -1;
+    dst_info.mmuFlag = 1;
+
+    rga_set_rect(&dst_info.rect, 0, 0, frameWidth, frameHeight, frameWidth, frameHeight, RK_FORMAT_BGRA_8888);
+}
+
 KMSDRM_FBInfo *
 KMSDRM_FBFromBO(_THIS, struct gbm_bo *bo)
 {
@@ -396,8 +434,8 @@ KMSDRM_CreateSurfaces(_THIS, SDL_Window * window)
     SDL_VideoData *viddata = ((SDL_VideoData *)_this->driverdata);
     SDL_WindowData *windata = (SDL_WindowData *)window->driverdata;
     SDL_DisplayData *dispdata = (SDL_DisplayData *) SDL_GetDisplayForWindow(window)->driverdata;
-    Uint32 width = dispdata->mode.hdisplay;
-    Uint32 height = dispdata->mode.vdisplay;
+    Uint32 width = dispdata->mode.vdisplay;
+    Uint32 height = dispdata->mode.hdisplay;
     Uint32 surface_fmt = GBM_FORMAT_XRGB8888;
     Uint32 surface_flags = GBM_BO_USE_SCANOUT | GBM_BO_USE_RENDERING;
 #if SDL_VIDEO_OPENGL_EGL
@@ -590,8 +628,8 @@ KMSDRM_VideoInit(_THIS)
 
     /* Setup the single display that's available */
 
-    display.desktop_mode.w = dispdata->mode.hdisplay;
-    display.desktop_mode.h = dispdata->mode.vdisplay;
+    display.desktop_mode.w = dispdata->mode.vdisplay;
+    display.desktop_mode.h = dispdata->mode.hdisplay;
     display.desktop_mode.refresh_rate = dispdata->mode.vrefresh;
 #if 1
     display.desktop_mode.format = SDL_PIXELFORMAT_ARGB8888;
@@ -721,8 +759,8 @@ KMSDRM_GetDisplayModes(_THIS, SDL_VideoDisplay * display)
           modedata->mode_index = i;
         }
 
-        mode.w = conn->modes[i].hdisplay;
-        mode.h = conn->modes[i].vdisplay;
+        mode.w = conn->modes[i].vdisplay;
+        mode.h = conn->modes[i].hdisplay;
         mode.refresh_rate = conn->modes[i].vrefresh;
         mode.format = SDL_PIXELFORMAT_ARGB8888;
         mode.driverdata = modedata;
@@ -773,6 +811,7 @@ KMSDRM_CreateWindow(_THIS, SDL_Window * window)
 {
     SDL_VideoData *viddata = (SDL_VideoData *)_this->driverdata;
     SDL_WindowData *windata;
+    SDL_DisplayData *data;
 
 #if SDL_VIDEO_OPENGL_EGL
     if (!_this->egl_data) {
@@ -826,6 +865,9 @@ KMSDRM_CreateWindow(_THIS, SDL_Window * window)
     SDL_SetMouseFocus(window);
     SDL_SetKeyboardFocus(window);
 
+    data = window->driverdata;
+    KMSDRM_InitRotateBuffer(_this, data->mode.hdisplay, data->mode.vdisplay);
+
     return 0;
 
 error:
@@ -863,6 +905,13 @@ KMSDRM_DestroyWindow(_THIS, SDL_Window * window)
     window->driverdata = NULL;
 
     SDL_free(windata);
+    for (int i = 0; i < RGA_BUFFERS_MAX; ++i) {
+        close(viddata->rga_buffer_prime_fds[i]);
+    }
+    if (src_info.fd) {
+        close(src_info.fd);
+    }
+    c_RkRgaDeInit();
 }
 
 int
diff --git a/src/video/kmsdrm/SDL_kmsdrmvideo.h b/src/video/kmsdrm/SDL_kmsdrmvideo.h
index 63dcf6ffd..f9ce2eb02 100644
--- a/src/video/kmsdrm/SDL_kmsdrmvideo.h
+++ b/src/video/kmsdrm/SDL_kmsdrmvideo.h
@@ -34,6 +34,10 @@
 #if SDL_VIDEO_OPENGL_EGL
 #include <EGL/egl.h>
 #endif
+#include <rga/RgaApi.h>
+#include <assert.h>
+
+#define RGA_BUFFERS_MAX (3)
 
 typedef struct SDL_VideoData
 {
@@ -44,6 +48,9 @@ typedef struct SDL_VideoData
     SDL_Window **windows;
     int max_windows;
     int num_windows;
+    struct gbm_bo* rga_buffers[RGA_BUFFERS_MAX];
+    int rga_buffer_prime_fds[RGA_BUFFERS_MAX];
+    int rga_buffer_index;
 } SDL_VideoData;
 
 
