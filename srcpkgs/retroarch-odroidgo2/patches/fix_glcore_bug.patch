diff --git a/retroarch.c b/retroarch.c
index 5bec559447..68796bde7c 100644
--- a/retroarch.c
+++ b/retroarch.c
@@ -19033,7 +19033,8 @@ static bool dynamic_verify_hw_context(
       case RETRO_HW_CONTEXT_OPENGLES3:
       case RETRO_HW_CONTEXT_OPENGLES_VERSION:
       case RETRO_HW_CONTEXT_OPENGL:
-         if (!string_is_equal(video_ident, "gl"))
+         if (!string_is_equal(video_ident, "gl") &&
+             !string_is_equal(video_ident, "glcore"))
             return false;
          break;
       case RETRO_HW_CONTEXT_DIRECT3D:
@@ -31831,7 +31832,7 @@ static bool hw_render_context_is_d3d11(const struct retro_hw_render_callback* hw
 }
 #endif
 
-#ifdef HAVE_OPENGL
+#if defined(HAVE_OPENGL) || defined(HAVE_OPENGL_CORE)
 static bool hw_render_context_is_gl(enum retro_hw_context_type type)
 {
    switch (type)
@@ -31841,6 +31842,7 @@ static bool hw_render_context_is_gl(enum retro_hw_context_type type)
       case RETRO_HW_CONTEXT_OPENGL_CORE:
 #endif
       case RETRO_HW_CONTEXT_OPENGLES2:
+      case RETRO_HW_CONTEXT_OPENGL_CORE:
       case RETRO_HW_CONTEXT_OPENGLES3:
       case RETRO_HW_CONTEXT_OPENGLES_VERSION:
          return true;
@@ -31852,13 +31854,6 @@ static bool hw_render_context_is_gl(enum retro_hw_context_type type)
 }
 #endif
 
-#ifdef HAVE_OPENGL_CORE
-static bool hw_render_context_is_glcore(enum retro_hw_context_type type)
-{
-   return type == RETRO_HW_CONTEXT_OPENGL_CORE;
-}
-#endif
-
 bool *video_driver_get_threaded(void)
 {
    struct rarch_state *p_rarch = &rarch_st;
@@ -33347,29 +33342,32 @@ static bool video_driver_find_driver(struct rarch_state *p_rarch)
       }
 #endif
 
-#if defined(HAVE_OPENGL)
+#if defined(HAVE_OPENGL) || defined(HAVE_OPENGL_CORE)
       if (hwr && hw_render_context_is_gl(hwr->context_type))
       {
          RARCH_LOG("[Video]: Using HW render, OpenGL driver forced.\n");
-         if (!string_is_equal(settings->arrays.video_driver, "gl"))
+
+         /* If we have configured one of the HW render capable GL drivers, go with that. */
+         if (  !string_is_equal(settings->arrays.video_driver, "gl") &&
+               !string_is_equal(settings->arrays.video_driver, "glcore"))
          {
             RARCH_LOG("[Video]: \"%s\" saved as cached driver.\n", settings->arrays.video_driver);
             strlcpy(p_rarch->cached_video_driver,
-               settings->arrays.video_driver,
-               sizeof(p_rarch->cached_video_driver));
+                  settings->arrays.video_driver,
+                  sizeof(p_rarch->cached_video_driver));
+#if defined(HAVE_OPENGL_CORE)
+            RARCH_LOG("[Video]: Forcing \"glcore\" driver.\n");
             configuration_set_string(settings,
-               settings->arrays.video_driver,
-               "gl");
-         }
-         p_rarch->current_video = &video_gl2;
-      }
+                  settings->arrays.video_driver, "glcore");
+            p_rarch->current_video = &video_gl_core;
+#else
+            RARCH_LOG("[Video]: Forcing \"gl\" driver.\n");
+            configuration_set_string(settings,
+                  settings->arrays.video_driver, "gl");
+            p_rarch->current_video = &video_gl2;
 #endif
-
-#if defined(HAVE_OPENGL_CORE)
-      if (hwr && hw_render_context_is_glcore(hwr->context_type))
-      {
-         RARCH_LOG("[Video]: Using HW render, OpenGL Core driver forced.\n");
-         if (!string_is_equal(settings->arrays.video_driver, "glcore"))
+         }
+         else
          {
             RARCH_LOG("[Video]: \"%s\" saved as cached driver.\n", settings->arrays.video_driver);
             strlcpy(p_rarch->cached_video_driver,
@@ -33379,7 +33377,6 @@ static bool video_driver_find_driver(struct rarch_state *p_rarch)
                settings->arrays.video_driver,
                "glcore");
          }
-         p_rarch->current_video = &video_gl_core;
       }
 #endif
 
